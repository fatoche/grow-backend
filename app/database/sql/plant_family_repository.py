from typing import List, Optional
from sqlalchemy.ext.asyncio import AsyncSession, create_async_engine, async_sessionmaker
from sqlalchemy import select, delete
from sqlalchemy.orm import selectinload

from app.database.base.plant_family import PlantFamilyRepository
from app.models.plant_family import PlantFamily, PlantFamilyCreate
from app.database.sql.models import SQLPlantFamily


class SQLPlantFamilyRepository(PlantFamilyRepository):
    """PostgreSQL implementation of PlantFamilyRepository using SQLAlchemy"""

    def __init__(self, database_url: str):
        self.database_url = database_url.replace(
            "postgresql://", "postgresql+asyncpg://"
        )
        self.engine = create_async_engine(self.database_url, echo=False)
        self.async_session = async_sessionmaker(self.engine, expire_on_commit=False)

    def _sql_plant_family_to_plant_family(self, sql_pf: SQLPlantFamily) -> PlantFamily:
        """Convert SQLPlantFamily model to PlantFamily Pydantic model"""
        return PlantFamily(
            id=sql_pf.id,
            name=sql_pf.name,
            nutrition_requirements=sql_pf.nutrition_requirements,
            rotation_time=sql_pf.rotation_time,
        )

    async def create_plant_family(self, plant_family: PlantFamilyCreate) -> PlantFamily:
        """Create a new plant family in PostgreSQL"""
        async with self.async_session() as session:
            # Create new plant family (ID will be auto-generated by PostgreSQL)
            sql_pf = SQLPlantFamily(
                name=plant_family.name,
                nutrition_requirements=plant_family.nutrition_requirements,
                rotation_time=plant_family.rotation_time,
            )

            session.add(sql_pf)
            await session.commit()
            await session.refresh(sql_pf)

            return self._sql_plant_family_to_plant_family(sql_pf)

    async def get_plant_family_by_id(
        self, plant_family_id: int
    ) -> Optional[PlantFamily]:
        """Get a plant family by its ID from PostgreSQL"""
        async with self.async_session() as session:
            result = await session.execute(
                select(SQLPlantFamily)
                .options(selectinload(SQLPlantFamily.beds))
                .where(SQLPlantFamily.id == plant_family_id)
            )
            sql_pf = result.scalar_one_or_none()
            if sql_pf:
                return self._sql_plant_family_to_plant_family(sql_pf)
            return None

    async def get_all_plant_families(self) -> List[PlantFamily]:
        """Get all plant families from PostgreSQL"""
        async with self.async_session() as session:
            result = await session.execute(
                select(SQLPlantFamily)
                .options(selectinload(SQLPlantFamily.beds))
                .order_by(SQLPlantFamily.name)
            )
            sql_pfs = result.scalars().all()
            return [
                self._sql_plant_family_to_plant_family(sql_pf) for sql_pf in sql_pfs
            ]

    async def delete_plant_family(self, plant_family_id: int) -> bool:
        """Delete a plant family from PostgreSQL"""
        async with self.async_session() as session:
            result = await session.execute(
                delete(SQLPlantFamily).where(SQLPlantFamily.id == plant_family_id)
            )
            await session.commit()
            return result.rowcount > 0

    async def close(self):
        """Close the database connection"""
        await self.engine.dispose()
